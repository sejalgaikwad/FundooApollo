var cov_ob26aprps=function(){var path="/home/admin1/Desktop/fundooApollo/graphql/mutation/oAuth.js";var hash="75b828bb50870f3c7fc2d8c2c41f8c95a2254406";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/admin1/Desktop/fundooApollo/graphql/mutation/oAuth.js",statementMap:{"0":{start:{line:1,column:12},end:{line:1,column:35}},"1":{start:{line:2,column:18},end:{line:2,column:50}},"2":{start:{line:3,column:17},end:{line:3,column:71}},"3":{start:{line:4,column:21},end:{line:4,column:65}},"4":{start:{line:5,column:15},end:{line:5,column:54}},"5":{start:{line:18,column:0},end:{line:82,column:1}},"6":{start:{line:19,column:4},end:{line:81,column:5}},"7":{start:{line:21,column:8},end:{line:23,column:9}},"8":{start:{line:22,column:12},end:{line:22,column:48}},"9":{start:{line:25,column:23},end:{line:25,column:167}},"10":{start:{line:28,column:30},end:{line:28,column:66}},"11":{start:{line:31,column:27},end:{line:31,column:58}},"12":{start:{line:34,column:22},end:{line:34,column:80}},"13":{start:{line:37,column:25},end:{line:37,column:73}},"14":{start:{line:39,column:8},end:{line:39,column:60}},"15":{start:{line:43,column:24},end:{line:43,column:73}},"16":{start:{line:45,column:8},end:{line:74,column:9}},"17":{start:{line:47,column:26},end:{line:51,column:14}},"18":{start:{line:54,column:28},end:{line:54,column:48}},"19":{start:{line:55,column:12},end:{line:55,column:34}},"20":{start:{line:57,column:24},end:{line:57,column:107}},"21":{start:{line:59,column:26},end:{line:59,column:68}},"22":{start:{line:61,column:24},end:{line:61,column:66}},"23":{start:{line:64,column:12},end:{line:64,column:25}},"24":{start:{line:65,column:12},end:{line:68,column:13}},"25":{start:{line:70,column:12},end:{line:73,column:13}},"26":{start:{line:76,column:8},end:{line:76,column:33}},"27":{start:{line:77,column:8},end:{line:80,column:9}},"28":{start:{line:92,column:0},end:{line:148,column:1}},"29":{start:{line:93,column:4},end:{line:147,column:5}},"30":{start:{line:95,column:8},end:{line:140,column:5}},"31":{start:{line:97,column:26},end:{line:97,column:81}},"32":{start:{line:98,column:12},end:{line:134,column:13}},"33":{start:{line:99,column:16},end:{line:99,column:36}},"34":{start:{line:101,column:36},end:{line:107,column:18}},"35":{start:{line:108,column:16},end:{line:127,column:17}},"36":{start:{line:109,column:34},end:{line:111,column:22}},"37":{start:{line:112,column:20},end:{line:112,column:40}},"38":{start:{line:114,column:20},end:{line:126,column:21}},"39":{start:{line:115,column:24},end:{line:118,column:25}},"40":{start:{line:122,column:24},end:{line:125,column:25}},"41":{start:{line:130,column:16},end:{line:133,column:17}},"42":{start:{line:136,column:8},end:{line:139,column:9}},"43":{start:{line:142,column:8},end:{line:142,column:33}},"44":{start:{line:143,column:8},end:{line:146,column:9}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:16},end:{line:18,column:17}},loc:{start:{line:18,column:47},end:{line:82,column:1}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:92,column:17},end:{line:92,column:18}},loc:{start:{line:92,column:48},end:{line:148,column:1}},line:92}},branchMap:{"0":{loc:{start:{line:21,column:8},end:{line:23,column:9}},type:"if",locations:[{start:{line:21,column:8},end:{line:23,column:9}},{start:{line:21,column:8},end:{line:23,column:9}}],line:21},"1":{loc:{start:{line:45,column:8},end:{line:74,column:9}},type:"if",locations:[{start:{line:45,column:8},end:{line:74,column:9}},{start:{line:45,column:8},end:{line:74,column:9}}],line:45},"2":{loc:{start:{line:95,column:8},end:{line:140,column:5}},type:"if",locations:[{start:{line:95,column:8},end:{line:140,column:5}},{start:{line:95,column:8},end:{line:140,column:5}}],line:95},"3":{loc:{start:{line:98,column:12},end:{line:134,column:13}},type:"if",locations:[{start:{line:98,column:12},end:{line:134,column:13}},{start:{line:98,column:12},end:{line:134,column:13}}],line:98},"4":{loc:{start:{line:108,column:16},end:{line:127,column:17}},type:"if",locations:[{start:{line:108,column:16},end:{line:127,column:17}},{start:{line:108,column:16},end:{line:127,column:17}}],line:108},"5":{loc:{start:{line:114,column:20},end:{line:126,column:21}},type:"if",locations:[{start:{line:114,column:20},end:{line:126,column:21}},{start:{line:114,column:20},end:{line:126,column:21}}],line:114}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"75b828bb50870f3c7fc2d8c2c41f8c95a2254406"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const jwt=(cov_ob26aprps.s[0]++,require("jsonwebtoken"));const userModel=(cov_ob26aprps.s[1]++,require("../../model/userModel"));const sendMail=(cov_ob26aprps.s[2]++,require("../../services/nodemailer").sendEmailFunction);const axiosService=(cov_ob26aprps.s[3]++,require("../../services/axios").axiosService);const logger=(cov_ob26aprps.s[4]++,require("../../services/logger").logger);/**
 * @description : OAuth using github
 * @purpose : register user using github
 * @param {*} root : result of previous resolve function
 * @param {*} args : arguments for resolver funtions
 * @param {*} context : context 
 */cov_ob26aprps.s[5]++;exports.oAuth=async(root,args,context)=>{cov_ob26aprps.f[0]++;cov_ob26aprps.s[6]++;try{cov_ob26aprps.s[7]++;// check if code is provided
if(!context.code){cov_ob26aprps.b[0][0]++;cov_ob26aprps.s[8]++;throw new Error("code not provided");}else{cov_ob26aprps.b[0][1]++;}// url for getting accesstoken
var tokenUrl=(cov_ob26aprps.s[9]++,`https://github.com/login/oauth/access_token?client_id=${process.env.CLIENT_ID}&client_secret=${process.env.CLIENT_SECRET}&code=${context.code}`);// axios call for getting accesstoken
const tokenResponse=(cov_ob26aprps.s[10]++,await axiosService('POST',tokenUrl));// access token in response
let access_token=(cov_ob26aprps.s[11]++,tokenResponse.data.access_token);// url for getting user info 
var infoUrl=(cov_ob26aprps.s[12]++,`https://api.github.com/user?access_token=${access_token}`);// axios call for getting user info
const response=(cov_ob26aprps.s[13]++,await axiosService('GET',infoUrl,access_token));cov_ob26aprps.s[14]++;console.log("response==================>",response);// check if user aleady present 
var existUser=(cov_ob26aprps.s[15]++,await userModel.find({gitID:response.data.id}));cov_ob26aprps.s[16]++;if(!existUser.length>0){cov_ob26aprps.b[1][0]++;// create new user
var gituser=(cov_ob26aprps.s[17]++,new userModel({gitToken:access_token,gitUsername:response.data.login,gitID:response.data.id}));// save new user
var savedUser=(cov_ob26aprps.s[18]++,await gituser.save());cov_ob26aprps.s[19]++;console.log(savedUser);var payload=(cov_ob26aprps.s[20]++,{gitID:response.data.id,user_ID:savedUser._id,gitUsername:response.data.login// generate jwt token
});const token=(cov_ob26aprps.s[21]++,jwt.sign(payload,process.env.APP_SECRET));const url=(cov_ob26aprps.s[22]++,`${context.origin}/graphql?token=`+token);// send mail
cov_ob26aprps.s[23]++;sendMail(url);cov_ob26aprps.s[24]++;return{"message":"OAuth successfull","success":true};}else{cov_ob26aprps.b[1][1]++;cov_ob26aprps.s[25]++;return{"message":"already user","success":true};}}catch(err){cov_ob26aprps.s[26]++;logger.error(err.message);cov_ob26aprps.s[27]++;return{"message":err.message,"success":false};}};/**
 * @description : verify gitAccount
 * @purpose : verify gitAccount
 * @param {*} root : result of previous resolve function
 * @param {*} args : arguments for resolver funtions
 * @param {*} context : context 
 */cov_ob26aprps.s[28]++;exports.verify=async(root,args,context)=>{cov_ob26aprps.f[1]++;cov_ob26aprps.s[29]++;try{cov_ob26aprps.s[30]++;// check if token provided
if(context.token){cov_ob26aprps.b[2][0]++;// verify token
var payload=(cov_ob26aprps.s[31]++,await jwt.verify(context.token,process.env.APP_SECRET));cov_ob26aprps.s[32]++;if(payload){cov_ob26aprps.b[3][0]++;cov_ob26aprps.s[33]++;console.log(payload);// check git user
var verifyGitUser=(cov_ob26aprps.s[34]++,await userModel.findByIdAndUpdate({_id:payload.user_ID},{$set:{gitVerify:true}}));cov_ob26aprps.s[35]++;if(verifyGitUser){cov_ob26aprps.b[4][0]++;var gituser=(cov_ob26aprps.s[36]++,await userModel.find({_id:payload.user_ID}));cov_ob26aprps.s[37]++;console.log(gituser);// set git verify true
cov_ob26aprps.s[38]++;if(gituser[0].gitVerify==true){cov_ob26aprps.b[5][0]++;cov_ob26aprps.s[39]++;return{"message":"Git login success","success":true};}// return git login unsucess
else{cov_ob26aprps.b[5][1]++;cov_ob26aprps.s[40]++;return{"message":"git login unsuccess","success":false};}}else{cov_ob26aprps.b[4][1]++;}}else{cov_ob26aprps.b[3][1]++;cov_ob26aprps.s[41]++;// return token not vallid
return{"message":" token not valid","success":false};}}else{cov_ob26aprps.b[2][1]++;cov_ob26aprps.s[42]++;return{"message":" token not provided","success":false};}}catch(err){cov_ob26aprps.s[43]++;logger.error(err.message);cov_ob26aprps.s[44]++;return{"message":err,"success":false};}};